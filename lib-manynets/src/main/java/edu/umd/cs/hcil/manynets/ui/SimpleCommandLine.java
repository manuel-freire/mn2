/*
 *  This file is part of ManyNets.
 *
 *  ManyNets is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as 
 *  published by the Free Software Foundation, either version 3 of the 
 *  License, or (at your option) any later version.
 *
 *  ManyNets is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with ManyNets.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  ManyNets was created at the Human Computer Interaction Lab, 
 *  University of Maryland at College Park. See the README file for details
 */

package edu.umd.cs.hcil.manynets.ui;

import java.util.ArrayList;

/**
 *
 * @author mfreire
 */
public class SimpleCommandLine extends javax.swing.JPanel {

    public Interpreter interpreter = null;

    public ArrayList<String> history = new ArrayList<String>();

    public void setInterpreter(Interpreter interpreter) {
        this.interpreter = interpreter;
    }

    public void write(String text) {
        jtaOutput.append(text + "\n");
    }

    /** Creates new form SimpleCommandLine */
    public SimpleCommandLine() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtaOutput = new javax.swing.JTextArea();
        jtfInput = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jtaOutput.setBackground(java.awt.SystemColor.controlHighlight);
        jtaOutput.setColumns(20);
        jtaOutput.setEditable(false);
        jtaOutput.setRows(5);
        jScrollPane1.setViewportView(jtaOutput);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jtfInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfInputActionPerformed(evt);
            }
        });
        add(jtfInput, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jtfInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfInputActionPerformed
        String text = jtfInput.getText();
        
        if (text.startsWith("help") || text.startsWith("?")) {
            interpreter.help(jtfInput.getText(), this);
            jtfInput.setText("");
            return;
        }

        if (text.equals("!")) {
            int i=0;
            for (String s : history) {
                write("" + (++i) + ": " + s);
            }
            return;
        }

        if (interpreter != null) {
            if (interpreter.command(text, this)) {
                if ( ! history.isEmpty() &&
                        ! history.get(history.size()-1).equals(text)) {
                    history.add(text);
                }
                jtfInput.setText("");
            }
        }
    }//GEN-LAST:event_jtfInputActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jtaOutput;
    private javax.swing.JTextField jtfInput;
    // End of variables declaration//GEN-END:variables

    public interface Interpreter {
        /**
         * Respond to a command written by the user. Should reply 'true' if command
         * successful, 'false' if not.
         * @param text
         * @param cl
         * @return
         */
        public boolean command(String text, SimpleCommandLine cl);
        /**
         * Should display help for the current interpreter
         * @param text - optional item that help has been requested for
         * @param cl
         */
        public void help(String text, SimpleCommandLine cl);
    }
}
