/*
 *  This file is part of ManyNets.
 *
 *  ManyNets is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as 
 *  published by the Free Software Foundation, either version 3 of the 
 *  License, or (at your option) any later version.
 *
 *  ManyNets is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with ManyNets.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  ManyNets was created at the Human Computer Interaction Lab, 
 *  University of Maryland at College Park. See the README file for details
 */

package edu.umd.cs.hcil.manynets.ui.renderers;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HistogramOverviewRenderer.java
 *
 * Created on Jun 12, 2009, 11:02:49 AM
 */
import edu.umd.cs.hcil.manynets.ColorPalette;
import edu.umd.cs.hcil.manynets.ui.ColumnManager;
import edu.umd.cs.hcil.manynets.hist.DefaultHistogramModel;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 * A row-renderer for scalars.
 * 
 * If the scalars are part of an ordinal sequence, each one is represented 
 * as a small horizontal bar, with bar-length corresponding to value.
 * If they are only nominal in nature, then they are represented by a small 
 * colored box (using category colors) at the 'bar-length' offset.
 *
 * @author Awalin Shopan, Manuel Freire
 */
public class ScalarOverviewRenderer extends AbstractRowRenderer {

    private String defaultPalette = "blue";
    private String categoricalPalette = "categorical";

    public void setPalettes(String main) {
        this.defaultPalette = main;
    }

    public ScalarOverviewRenderer() {
    }

    @Override
    protected void paintImage(BufferedImage bi) {
        int totalRows = cm.getTable().getRowCount();
        Rectangle2D rectangle = new Rectangle2D.Double();
        Graphics2D g2d = (Graphics2D) bi.createGraphics();

        DefaultHistogramModel m = (DefaultHistogramModel)cm.getModel();
        boolean useMapper = m.isNominal();

        // adjust categorical box height; 1 = real, > 1 is for cramped conditions
        double rowHeight = height*1.0/totalRows;
        double boxHeight = rowHeight > 1 ? 1 : 1/rowHeight;

        double range = (cm.getMax() - cm.getMin());
        ColorPalette cp = ColorPalette.getPalette(
                useMapper ? categoricalPalette : defaultPalette);
        for (int i = 0; i < totalRows; i++) {
            g2d.setColor(useMapper ?
                cp.mapCategorical((int)m.getMappedValue(cm.getValue(indices[i]))) :
                cp.map(1f));

            double v = useMapper ?
                m.getMappedValue(cm.getValue(indices[i])) : 
                Double.parseDouble("" + cm.getValue(indices[i]));
            double w = (width - 2) * (v - cm.getMin()) * (1.0
                    / range);
            if (useMapper) {
                w = w * (range / (range + 1)) + 0.5 * (width - 2)/ (range + 1);
                rectangle.setRect(w-1, i*rowHeight, 3, boxHeight);
            } else {              
                rectangle.setRect(0, i*rowHeight, w, rowHeight);
            }
            g2d.fill(rectangle);
        }
    }

    @Override
    public String getXCaption() {
        return "Values";
    }

    @Override
    public JPanel getSettingsPanel() {
        return new DefaultRowRendererOPanel(this);
    }

    @Override
    protected String getToolTipText(int row, Point mousePosition) {
        StringBuilder sb = new StringBuilder("<html>\n");
        ArrayList al = new ArrayList();
        al.add(cm.getTablePanel().getBaseWrapper().getRef(cm.getTable().convertRowIndexToModel(row)));
        String tip= cm.getTooltipFor(al);
        sb.append(tip);
        sb.append("</html>");
        return "" + sb.toString();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean canHandle(ColumnManager cm, boolean overview) {
        return overview && (
                Integer.TYPE.isAssignableFrom(cm.getColumnClass()) ||
                Double.TYPE.isAssignableFrom(cm.getColumnClass()));
    }

    @Override
    public String getRendererName() {
        return "Horiz. Bars";
    }

    @Override
    public ColumnCellRenderer copy() {
        ScalarOverviewRenderer r = new ScalarOverviewRenderer();
        r.dirty = true;
        r.metric = metric;
        r.sortAttribute = sortAttribute;
        r.suspendSort = suspendSort;

        r.defaultPalette = defaultPalette;
        r.init(cm);
        return r;
    }
}
