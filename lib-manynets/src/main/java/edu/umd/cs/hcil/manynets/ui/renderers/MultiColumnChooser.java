/*
 *  This file is part of ManyNets.
 *
 *  ManyNets is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as 
 *  published by the Free Software Foundation, either version 3 of the 
 *  License, or (at your option) any later version.
 *
 *  ManyNets is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with ManyNets.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  ManyNets was created at the Human Computer Interaction Lab, 
 *  University of Maryland at College Park. See the README file for details
 */

package edu.umd.cs.hcil.manynets.ui.renderers;

import edu.umd.cs.hcil.manynets.model.Distribution;
import edu.umd.cs.hcil.manynets.ui.ColumnManager;
import edu.umd.cs.hcil.manynets.ui.DList;
import edu.umd.cs.hcil.manynets.ui.TablePanel;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author mfreire
 */
public class MultiColumnChooser extends javax.swing.JDialog {

    private DefaultListModel lmUsed = new DefaultListModel();
    private DefaultListModel lmAvailable = new DefaultListModel();

    private boolean accepted = false;

    private static class ColumnItem {
        private int index;
        private String name;
        public ColumnItem(JTable jt, int i) {
            this.index = i;
            this.name = jt.getColumnName(i);
        }
        @Override
        public String toString() {
            return name;
        }
        public int getIndex() {
            return index;
        }
    }

    /** Creates new form MultiColumnChooser */
    public MultiColumnChooser() {
        initComponents();
        setModal(true);
        jpLeft.add(new JScrollPane(new DList(lmUsed)));
        jpLeft.validate();
        jpRight.add(new JScrollPane(new DList(lmAvailable)));
        jpRight.validate();
        setSize(600,400);
    }

    public void init(TablePanel tp, MultiColumnOverviewRenderer mcr) {

        lmUsed.clear();
        lmAvailable.clear();

        lmUsed.addListDataListener(new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) {
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                jbAccept.setEnabled( ! lmUsed.isEmpty());
            }
        });

        boolean used[] = new boolean[tp.getTable().getColumnCount()];
        for (ColumnManager cm : mcr.getColumns()) {
            int i = cm.getColumnIndex();
            lmUsed.addElement(new ColumnItem(tp.getTable(), i));
            used[i] = true;
        }
        for (int i=0; i<tp.getTable().getColumnCount(); i++) {
            if ( ! used[i]) {
                lmAvailable.addElement(new ColumnItem(tp.getTable(), i));
            }
        }
    }

    public boolean isAccepted() {
        return accepted;
    }

    public int[] getSelection() {
        int[] selection = new int[lmUsed.getSize()];
        for (int i=0; i<selection.length; i++) {
            selection[i] = ((ColumnItem)lmUsed.get(i)).getIndex();
        }
        return selection;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jbAccept = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jpLeft = new javax.swing.JPanel();
        jpRight = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("<html>Drag and drop column names from one list to another, or within a single list.</html>");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 5, 5, 5);
        getContentPane().add(jLabel1, gridBagConstraints);

        jbAccept.setText("Accept");
        jbAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAcceptActionPerformed(evt);
            }
        });
        jPanel1.add(jbAccept);

        jbCancel.setText(" Cancel ");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel1.add(jbCancel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(jPanel1, gridBagConstraints);

        jpLeft.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected"));
        jpLeft.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(jpLeft, gridBagConstraints);

        jpRight.setBorder(javax.swing.BorderFactory.createTitledBorder("Available"));
        jpRight.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(jpRight, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAcceptActionPerformed
        System.err.println("Accepted");
        accepted = true;
        dispose();
    }//GEN-LAST:event_jbAcceptActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        System.err.println("Canceled");
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MultiColumnChooser().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbAccept;
    private javax.swing.JButton jbCancel;
    private javax.swing.JPanel jpLeft;
    private javax.swing.JPanel jpRight;
    // End of variables declaration//GEN-END:variables
}
