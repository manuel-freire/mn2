/*
 *  This file is part of ManyNets.
 *
 *  ManyNets is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as 
 *  published by the Free Software Foundation, either version 3 of the 
 *  License, or (at your option) any later version.
 *
 *  ManyNets is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with ManyNets.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  ManyNets was created at the Human Computer Interaction Lab, 
 *  University of Maryland at College Park. See the README file for details
 */

package edu.umd.cs.hcil.manynets.ui;

import edu.umd.cs.hcil.manynets.model.TableWrapper;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

/**
 * A dialog to create a new network from a candidate set of relationships.
 * Note that this creates a /new/ network, it is not intended to /derive/ networks
 * @author mfreire
 */
public class NetworkCreationPanel extends javax.swing.JPanel {

    private ArrayList<TableWrapper> candidates;

    /** Creates new form NetworkCreationPanel */
    public NetworkCreationPanel() {
        initComponents();
        setSize(400, 300);
        jbAccept.setEnabled(false);
    }

    public void setCandidateRelationships(ArrayList<TableWrapper> candidates) {
        setCandidateRelationships(candidates, null);
    }

    public void setCandidateRelationships(ArrayList<TableWrapper> candidates, ArrayList<String> names) {
        this.candidates = candidates;
        ((DefaultListModel)jlRelationships.getModel()).clear();
        for (int i=0; i<candidates.size(); i++) {
            TableWrapper table = candidates.get(i);
            String name = (names != null && names.get(i) != null) ?
                names.get(i) : table.getName();
            ((DefaultListModel)jlRelationships.getModel()).addElement(name);
        }
        jbAccept.setEnabled(true);
    }

    public boolean elideSelected() {
        return jcbElide.isSelected();
    }
    
    public boolean mergeSelected() {
        return jcbMerge.isSelected();
    }

    public ArrayList<TableWrapper> getSelected() {
        if (jlRelationships.isSelectionEmpty()) return null;

        ArrayList<TableWrapper> good = new ArrayList<TableWrapper>();
        for (int i : jlRelationships.getSelectedIndices()) {
           good.add(candidates.get(i));
        }
        return good;
    }

    public String getNetName() {
        return jtfNetName.getText();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jtfNetName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlRelationships = new javax.swing.JList();
        jcbMerge = new javax.swing.JCheckBox();
        jcbElide = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jbAccept = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jtfNetName.setText(""); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 6, 5);
        jPanel1.add(jtfNetName, gridBagConstraints);

        jLabel1.setText("Network Name"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(45, 100));

        jlRelationships.setModel(new javax.swing.DefaultListModel());
        jScrollPane1.setViewportView(jlRelationships);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        jcbMerge.setText("Merge nodes of selected relations if possible");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jcbMerge, gridBagConstraints);

        jcbElide.setText("Do not add nodes with degree 0 (singletons)");
        jcbElide.setSelected(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jcbElide, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jbAccept.setText("Accept"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 44;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jPanel2.add(jbAccept, gridBagConstraints);

        jbCancel.setText("Cancel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 55;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 0);
        jPanel2.add(jbCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPanel2, gridBagConstraints);
    }

    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox jcbElide;
    private javax.swing.JCheckBox jcbMerge;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtfNetName;
    public javax.swing.JButton jbAccept;
    public javax.swing.JButton jbCancel;
    private javax.swing.JList jlRelationships;
}
