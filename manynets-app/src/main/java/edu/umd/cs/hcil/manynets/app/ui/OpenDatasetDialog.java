/*
 *  This file is part of ManyNets.
 *
 *  ManyNets is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as 
 *  published by the Free Software Foundation, either version 3 of the 
 *  License, or (at your option) any later version.
 *
 *  ManyNets is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with ManyNets.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  ManyNets was created at the Human Computer Interaction Lab, 
 *  University of Maryland at College Park. See the README file for details
 */

package edu.umd.cs.hcil.manynets.app.ui;

import edu.umd.cs.hcil.manynets.model.Dataset;
import edu.umd.cs.hcil.manynets.model.DatasetLoader;
import edu.umd.cs.hcil.manynets.model.SchemaInstance;
import edu.umd.cs.hcil.manynets.util.FileUtils;
import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

/**
 *
 * @author mfreire
 */
public class OpenDatasetDialog extends javax.swing.JDialog {

    private boolean accepted = false;
    private File descriptor;
    private ArrayList<SchemaInstance> instances;

    /** Creates new form OpenDatasetDialog */
    public OpenDatasetDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public void askForFile(File start) {
        File f = start;
        if (f == null) {
            File defaultDir = new File("./data");
            if ( ! defaultDir.isDirectory()) {
                defaultDir = new File(".");
            }
            File[] chosen = FileUtils.chooseFile(
                    null, defaultDir,
                    "Dataset descriptor", true,
                    JFileChooser.FILES_AND_DIRECTORIES, false);
            if (chosen == null) {
                return;
            }

            f = chosen[0];
        }
        if (f.isDirectory()) {
            f = DatasetLoader.fileToDescriptor(f, false);
            if (f == null) {
                NotifyDescriptor.Message nd = new NotifyDescriptor.Message(
                    "Expected a .xml file within the folder");
                nd.setOptionType(NotifyDescriptor.ERROR_MESSAGE);
                nd.setTitle("Unable to open dataset");
                DialogDisplayer.getDefault().notify(nd);
                return;
            }
        }
        DefaultListModel m = new DefaultListModel();
        try {
            for (String s : Dataset.readInstanceNames(f)) {
                m.addElement(s);
            }
            jlInstances.setModel(m);
            descriptor = f;
            jbSelAllActionPerformed(null);
            jtfDescriptorFileName.setText(FileUtils.relativePath(f.getAbsolutePath()));
        } catch (Exception e) {
            NotifyDescriptor.Message nd = new NotifyDescriptor.Message(
                "Malformed .xml file, cannot read list of instances");
            nd.setOptionType(NotifyDescriptor.ERROR_MESSAGE);
            nd.setTitle("Unable to open dataset");
            DialogDisplayer.getDefault().notify(nd);
            return;
        }
    }

    public HashSet<String> getInstances() {
        HashSet<String> set = new HashSet<String>();
        for (Object o : jlInstances.getSelectedValues()) {
            set.add("" + o);
        }
        return set;
    }

    public File getDescriptor() {
        return descriptor;
    }

    public boolean wasAccepted() {
        return accepted;
    }

    public boolean openEntities() {
        return jcbEntities.isSelected();
    }

    public boolean openRels() {
        return jcbRels.isSelected();
    }

    public boolean graphPerRel() {
        return jcbGraphRels.isSelected();
    }

    public boolean graphAllRels() {
        return jcbGraphFull.isSelected();
    }

    public boolean defaultStats() {
        return ! jcbNoDefaultStats.isSelected();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jcbRels = new javax.swing.JCheckBox();
        jcbEntities = new javax.swing.JCheckBox();
        jcbGraphRels = new javax.swing.JCheckBox();
        jcbGraphFull = new javax.swing.JCheckBox();
        jcbNoDefaultStats = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfDescriptorFileName = new javax.swing.JTextField();
        jbChooseDescriptor = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jbSelAll = new javax.swing.JButton();
        jbClearSel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlInstances = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jbAccept = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Additional options"));

        jcbRels.setSelected(true);
        jcbRels.setText("Display all relationship (edge) tables");

        jcbEntities.setSelected(true);
        jcbEntities.setText("Display all entity (node) tables");

        jcbGraphRels.setSelected(true);
        jcbGraphRels.setText("Create and display networks with each relationship");

        jcbGraphFull.setText("Create network with all relationships together");

        jcbNoDefaultStats.setText("Do not add default stats (for large datasets)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbEntities)
                    .addComponent(jcbRels)
                    .addComponent(jcbGraphRels)
                    .addComponent(jcbGraphFull)
                    .addComponent(jcbNoDefaultStats))
                .addContainerGap(243, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jcbEntities)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbRels, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbGraphRels)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbGraphFull)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbNoDefaultStats)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("Descriptor or dataset folder");

        jtfDescriptorFileName.setEditable(false);
        jtfDescriptorFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfDescriptorFileNameActionPerformed(evt);
            }
        });

        jbChooseDescriptor.setText("Select...");
        jbChooseDescriptor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbChooseDescriptorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jtfDescriptorFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbChooseDescriptor, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfDescriptorFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jbChooseDescriptor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Select instances"));

        jbSelAll.setText("All");
        jbSelAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSelAllActionPerformed(evt);
            }
        });

        jbClearSel.setText("None");
        jbClearSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbClearSelActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jlInstances);

        jLabel2.setFont(jLabel2.getFont().deriveFont((jLabel2.getFont().getStyle() | java.awt.Font.ITALIC)));
        jLabel2.setText("Use Ctrl or Shift to (de)select multiple instances");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbSelAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbClearSel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(281, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jbSelAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbClearSel))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );

        jbAccept.setText("Accept");
        jbAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAcceptActionPerformed(evt);
            }
        });

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jbAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(jbCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(162, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jbAccept)
                .addComponent(jbCancel))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtfDescriptorFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfDescriptorFileNameActionPerformed
        String fn = jtfDescriptorFileName.getText();
        jtfDescriptorFileName.setText("");
        askForFile(new File(fn));
    }//GEN-LAST:event_jtfDescriptorFileNameActionPerformed

    private void jbChooseDescriptorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbChooseDescriptorActionPerformed
        askForFile(null);
    }//GEN-LAST:event_jbChooseDescriptorActionPerformed

    private void jbAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAcceptActionPerformed
        accepted = true;
        dispose();
    }//GEN-LAST:event_jbAcceptActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jbSelAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSelAllActionPerformed
        jlInstances.setSelectionInterval(0, jlInstances.getModel().getSize()-1);
    }//GEN-LAST:event_jbSelAllActionPerformed

    private void jbClearSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClearSelActionPerformed
        jlInstances.clearSelection();
    }//GEN-LAST:event_jbClearSelActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OpenDatasetDialog dialog = new OpenDatasetDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAccept;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbChooseDescriptor;
    private javax.swing.JButton jbClearSel;
    private javax.swing.JButton jbSelAll;
    private javax.swing.JCheckBox jcbEntities;
    private javax.swing.JCheckBox jcbGraphFull;
    private javax.swing.JCheckBox jcbGraphRels;
    private javax.swing.JCheckBox jcbNoDefaultStats;
    private javax.swing.JCheckBox jcbRels;
    private javax.swing.JList jlInstances;
    private javax.swing.JTextField jtfDescriptorFileName;
    // End of variables declaration//GEN-END:variables

}
