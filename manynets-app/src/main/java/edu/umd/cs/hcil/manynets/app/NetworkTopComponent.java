/*
 *  This file is part of ManyNets.
 *
 *  ManyNets is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as 
 *  published by the Free Software Foundation, either version 3 of the 
 *  License, or (at your option) any later version.
 *
 *  ManyNets is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with ManyNets.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  ManyNets was created at the Human Computer Interaction Lab, 
 *  University of Maryland at College Park. See the README file for details
 */

package edu.umd.cs.hcil.manynets.app;

import edu.umd.cs.hcil.manynets.model.GraphMerger;
import edu.umd.cs.hcil.socialaction.SocialAction;
import java.util.Collection;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import prefuse.activity.ActivityManager;
import prefuse.data.Graph;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd="-//edu.umd.cs.hcil.manynets.app//NetworkTopComponent//EN",
    autostore=false
)
public final class NetworkTopComponent extends TopComponent {

    // to stop the Prefuse activity thread when no graph being layed out
    private static final Object runningInstanceMutex = new Object();
    private static int runningInstances = 0;

    private static NetworkTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "NetworkTopComponentTopComponent";

    public NetworkTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(NetworkTopComponent.class, "CTL_NetworkTopComponentTopComponent"));
        setToolTipText(NbBundle.getMessage(NetworkTopComponent.class, "HINT_NetworkTopComponentTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

    public static void displayNetwork(String title, String labelField, Collection<Graph> graphs) {
        Graph g = GraphMerger.mergeGraphs(graphs, true);
        displayNetwork(title, labelField, g);
    }

    public static void displayNetwork(String title, String labelField, Graph g) {
        SocialAction sa = (SocialAction)SocialAction.demo2(g, labelField);
        NetworkTopComponent ntc = new NetworkTopComponent();

        if (g.isDirected()) {
            sa.setCurvedEdges(true);
            sa.setArrowRendered(true);
        }

        // hardcoded for Jen's FilmTrust network
        if (g.getEdgeTable().canGetInt("RATING") && g.getEdgeCount() > 0) {
            sa.setEdgeColorField("RATING");
            sa.getEdgeRank1D().setRankType("RATING");
            sa.rankEdgesButton.doClick();
        }
        if (g.getEdgeTable().canGetInt("TRUST") && g.getEdgeCount() > 0) {
            sa.setEdgeColorField("TRUST");
            sa.getEdgeRank1D().setRankType("TRUST");
            sa.rankEdgesButton.doClick();
        }

        ntc.add(sa);
        ntc.setDisplayName(title);
        ntc.open();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized NetworkTopComponent getDefault() {
        if (instance == null) {
            instance = new NetworkTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the NetworkTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized NetworkTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(NetworkTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof NetworkTopComponent) {
            return (NetworkTopComponent) win;
        }
        Logger.getLogger(NetworkTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {        
        synchronized (runningInstanceMutex) {
            runningInstances ++;
        }
    }

    @Override
    public void componentClosed() {
        synchronized (runningInstanceMutex) {
            runningInstances --;
            if (runningInstances == 0) {
                ActivityManager.stopThread();
            }
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        NetworkTopComponent singleton = NetworkTopComponent.getDefault();
        singleton.readPropertiesImpl(p);
        return singleton;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
